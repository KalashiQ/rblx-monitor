import pino from 'pino';
import { config } from './config';
import { getUnnotifiedAnomalies, markAnomalyAsNotified } from './anomaly-detector';
import { getAnomalySettings } from './db';
import type { Anomaly } from './types';

const logger = pino({ level: config.LOG_LEVEL });

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏
 */
export function formatAnomalyMessage(anomaly: Anomaly & { game_title: string; game_url: string }): string {
  const settings = getAnomalySettings();
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  if (settings.custom_message) {
    const direction = anomaly.direction === 'up' ? 'üìà –†–û–°–¢' : 'üìâ –ü–ê–î–ï–ù–ò–ï';
    const deltaSign = anomaly.delta > 0 ? '+' : '';
    const nSigma = config.ANOMALY_N_SIGMA;
    
    return settings.custom_message
      .replace(/\{game_title\}/g, anomaly.game_title)
      .replace(/\{direction\}/g, direction)
      .replace(/\{delta\}/g, `${deltaSign}${Math.round(anomaly.delta)}`)
      .replace(/\{n_sigma\}/g, nSigma.toString())
      .replace(/\{threshold\}/g, Math.round(anomaly.threshold).toString())
      .replace(/\{current_online\}/g, Math.round(anomaly.mean + anomaly.delta).toString())
      .replace(/\{mean\}/g, Math.round(anomaly.mean).toString())
      .replace(/\{stddev\}/g, Math.round(anomaly.stddev).toString())
      .replace(/\{game_url\}/g, anomaly.game_url)
      .replace(/\{timestamp\}/g, new Date(anomaly.timestamp).toLocaleString('ru-RU'));
  }
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const direction = anomaly.direction === 'up' ? 'üìà –†–û–°–¢' : 'üìâ –ü–ê–î–ï–ù–ò–ï';
  const deltaSign = anomaly.delta > 0 ? '+' : '';
  const nSigma = config.ANOMALY_N_SIGMA;
  
  return `üö® –ê–ù–û–ú–ê–õ–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê!\n\n` +
    `üéÆ –ò–≥—Ä–∞: ${anomaly.game_title}\n` +
    `üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction}\n` +
    `üìà Œî: ${deltaSign}${Math.round(anomaly.delta)} (${nSigma}œÉ=${Math.round(anomaly.threshold)})\n` +
    `üë• –¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω: ${Math.round(anomaly.mean + anomaly.delta)}\n` +
    `üìä –°—Ä–µ–¥–Ω–µ–µ: ${Math.round(anomaly.mean)}\n` +
    `üìè œÉ: ${Math.round(anomaly.stddev)}\n` +
    `üîó –°—Å—ã–ª–∫–∞: ${anomaly.game_url}\n` +
    `‚è∞ –í—Ä–µ–º—è: ${new Date(anomaly.timestamp).toLocaleString('ru-RU')}`;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 */
async function sendTelegramNotification(message: string): Promise<boolean> {
  if (!config.TELEGRAM_BOT_TOKEN || !config.TELEGRAM_CHAT_ID) {
    logger.warn('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    return false;
  }
  
  try {
    const url = `https://api.telegram.org/bot${config.TELEGRAM_BOT_TOKEN}/sendMessage`;
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: config.TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }
    
    const result = await response.json();
    if (!result.ok) {
      throw new Error(`Telegram API error: ${result.description}`);
    }
    
    logger.info({ messageId: result.result.message_id }, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    return true;
    
  } catch (error) {
    logger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram');
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏
 */
export async function sendAnomalyNotifications(): Promise<{ sent: number; errors: number }> {
  let sent = 0;
  let errors = 0;
  
  try {
    const unnotifiedAnomalies = getUnnotifiedAnomalies();
    
    if (unnotifiedAnomalies.length === 0) {
      logger.debug('–ù–µ—Ç –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π');
      return { sent: 0, errors: 0 };
    }
    
    logger.info({ count: unnotifiedAnomalies.length }, '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö');
    
    for (const anomaly of unnotifiedAnomalies) {
      try {
        const message = formatAnomalyMessage(anomaly);
        const success = await sendTelegramNotification(message);
        
        if (success) {
          markAnomalyAsNotified(anomaly.id!);
          sent++;
          logger.info({ anomalyId: anomaly.id, gameTitle: anomaly.game_title }, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } else {
          errors++;
          logger.error({ anomalyId: anomaly.id }, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏');
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        errors++;
        logger.error({ 
          anomalyId: anomaly.id, 
          error: (error as Error).message 
        }, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–æ–º–∞–ª–∏–∏');
      }
    }
    
    logger.info({ sent, errors }, '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    logger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    errors++;
  }
  
  return { sent, errors };
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
export async function sendTestNotification(): Promise<boolean> {
  const testMessage = `üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï\n\n` +
    `‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–Ω–æ–º–∞–ª–∏–π Roblox —Ä–∞–±–æ—Ç–∞–µ—Ç!\n` +
    `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
    `üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏: NœÉ=${config.ANOMALY_N_SIGMA}, –º–∏–Ω.—Ç–æ—á–µ–∫=${config.MIN_POINTS_IN_WINDOW}`;
  
  return await sendTelegramNotification(testMessage);
}
