import { Telegraf, Markup } from 'telegraf';
import { config } from './config';
import { parseNewGames } from './populate';
import { db, getAnomalySettings, updateAnomalySettings, updateCustomMessage, performDataCleanup } from './db';
import { getDatabaseStats, clearGames, clearSnapshots, clearAnomalies, selectiveCleanup } from './clear-and-restart';
import { startCircularParsingForDuration } from './roblox-parser';
import { sendTestNotification } from './anomaly-notifier';
import * as fs from 'fs';
import * as path from 'path';

export class TelegramBot {
  private bot: Telegraf;
  private isParsingActive: boolean = false;
  private isGameParsingActive: boolean = false;
  private parsingStartTime: number = 0;
  private waitingForNSigma: boolean = false;
  private waitingForMinDelta: boolean = false;
  private waitingForCustomMessage: boolean = false;
  private parsingStats: {
    totalProcessed: number;
    successfulParses: number;
    failedParses: number;
    lastGameTitle: string;
    completedCycles: number;
    lastGameIndex: number;
  } = {
    totalProcessed: 0,
    successfulParses: 0,
    failedParses: 0,
    lastGameTitle: '',
    completedCycles: 0,
    lastGameIndex: -1
  };

  constructor() {
    console.log('ü§ñ Creating TelegramBot instance...');
    if (!config.TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN is required');
    }
    
    console.log('üîë Bot token found:', config.TELEGRAM_BOT_TOKEN.substring(0, 10) + '...');
    this.bot = new Telegraf(config.TELEGRAM_BOT_TOKEN);

    // Middleware: allow-list by user id from env ALLOWED_USER_IDS (comma-separated)
    const allowedSet = new Set<number>();
    if (config.ALLOWED_USER_IDS) {
      for (const raw of config.ALLOWED_USER_IDS.split(',')) {
        const id = Number(raw.trim());
        if (!Number.isNaN(id)) allowedSet.add(id);
      }
    }

    this.bot.use(async (ctx, next) => {
      const fromId = ctx.from?.id;
      if (allowedSet.size === 0) {
        // No allow-list configured -> allow everyone
        return next();
      }
      if (fromId && allowedSet.has(fromId)) {
        return next();
      }
      try {
        await ctx.reply('‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.');
      } catch {}
      return;
    });

    this.setupHandlers();
    console.log('‚úÖ TelegramBot instance created');
  }

  private setupHandlers() {
    console.log('üîß Setting up handlers...');
    
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start((ctx) => {
      console.log('üëã /start command received');
      ctx.reply(
        'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Roblox Monitor Bot!\n\n' +
        '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –∏–≥—Ä–∞—Ö Roblox.\n\n' +
        'üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
        this.getPersistentKeyboard()
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help((ctx) => {
      ctx.reply(
        'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
        'üîç –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä —Å Roblox\n' +
        'üö® –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π - –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∞–Ω–æ–º–∞–ª–∏–π\n' +
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n' +
        'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n\n' +
        'üìä /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞\n' +
        'üõë /stop_parsing - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∞–Ω–æ–º–∞–ª–∏–π\n' +
        'üß™ /test_notification - —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n' +
        '‚å®Ô∏è /keyboard - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n\n' +
        'üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.',
        this.getPersistentKeyboard()
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stop_parsing
    this.bot.command('stop_parsing', (ctx) => {
      console.log('üõë stop_parsing command received');
      this.handleStopParsing(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /status
    this.bot.command('status', (ctx) => {
      console.log('üìä status command received');
      this.handleStatus(ctx);
    });


    // –ö–æ–º–∞–Ω–¥–∞ /test_notification
    this.bot.command('test_notification', (ctx) => {
      console.log('üß™ test_notification command received');
      this.handleTestNotification(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /keyboard
    this.bot.command('keyboard', (ctx) => {
      console.log('‚å®Ô∏è keyboard command received');
      ctx.reply(
        '‚å®Ô∏è –ü–æ–∫–∞–∑–∞–Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞\n\n' +
        'üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
        this.getPersistentKeyboard()
      );
    });

    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    this.bot.command('settings_n_sigma', (ctx) => {
      console.log('üìä settings_n_sigma command received');
      this.handleSettingsNSigma(ctx);
    });

    this.bot.command('settings_min_delta', (ctx) => {
      console.log('üë• settings_min_delta command received');
      this.handleSettingsMinDelta(ctx);
    });

    this.bot.command('settings_custom_message', (ctx) => {
      console.log('üí¨ settings_custom_message command received');
      this.handleSettingsCustomMessage(ctx);
    });

    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    this.bot.command('export_db', (ctx) => {
      console.log('üì§ export_db command received');
      this.handleExportDb(ctx);
    });

    this.bot.command('cleanup_data', (ctx) => {
      console.log('üßπ cleanup_data command received');
      this.handleCleanupData(ctx);
    });

    this.bot.command('db_stats', (ctx) => {
      console.log('üìä db_stats command received');
      this.handleDatabaseStats(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    this.bot.action('parse_games', (ctx) => {
      console.log('üîç parse_games action triggered');
      this.handleParseGames(ctx);
    });
    this.bot.action('find_anomalies', (ctx) => {
      console.log('üö® find_anomalies action triggered');
      this.handleFindAnomalies(ctx);
    });
    this.bot.action('settings', (ctx) => {
      console.log('‚öôÔ∏è settings action triggered');
      this.handleSettings(ctx);
    });
    this.bot.action('export_db', (ctx) => {
      console.log('üì§ export_db action triggered');
      this.handleExportDb(ctx);
    });
    this.bot.action('back_to_main', (ctx) => {
      console.log('üè† back_to_main action triggered');
      this.handleBackToMain(ctx);
    });
    this.bot.action('cancel_parsing', (ctx) => {
      console.log('üõë cancel_parsing action triggered');
      this.handleStopParsing(ctx);
    });
    this.bot.action('settings_n_sigma', (ctx) => {
      console.log('üìä settings_n_sigma action triggered');
      this.handleSettingsNSigma(ctx);
    });
    this.bot.action('settings_min_delta', (ctx) => {
      console.log('üë• settings_min_delta action triggered');
      this.handleSettingsMinDelta(ctx);
    });
    this.bot.action('settings_custom_message', (ctx) => {
      console.log('üí¨ settings_custom_message action triggered');
      this.handleSettingsCustomMessage(ctx);
    });
    this.bot.action('cleanup_data', (ctx) => {
      console.log('üßπ cleanup_data action triggered');
      this.handleCleanupData(ctx);
    });
    this.bot.action('database_menu', (ctx) => {
      console.log('üóÑÔ∏è database_menu action triggered');
      this.handleDatabaseMenu(ctx);
    });
    this.bot.action('db_stats', (ctx) => {
      console.log('üìä db_stats action triggered');
      this.handleDatabaseStats(ctx);
    });
    this.bot.action('cancel_game_parsing', (ctx) => {
      console.log('üõë cancel_game_parsing action triggered');
      this.handleCancelGameParsing(ctx);
    });
    this.bot.action('db_cleanup_menu', (ctx) => {
      console.log('üóëÔ∏è db_cleanup_menu action triggered');
      this.handleDatabaseCleanupMenu(ctx);
    });
    this.bot.action('clear_games', (ctx) => {
      console.log('üéÆ clear_games action triggered');
      this.handleClearGames(ctx);
    });
    this.bot.action('clear_snapshots', (ctx) => {
      console.log('üì∏ clear_snapshots action triggered');
      this.handleClearSnapshots(ctx);
    });
    this.bot.action('clear_anomalies', (ctx) => {
      console.log('üö® clear_anomalies action triggered');
      this.handleClearAnomalies(ctx);
    });
    this.bot.action('clear_all_data', (ctx) => {
      console.log('üóëÔ∏è clear_all_data action triggered');
      this.handleClearAllData(ctx);
    });
    this.bot.action('confirm_clear_games', (ctx) => {
      console.log('‚úÖ confirm_clear_games action triggered');
      this.handleConfirmClearGames(ctx);
    });
    this.bot.action('confirm_clear_snapshots', (ctx) => {
      console.log('‚úÖ confirm_clear_snapshots action triggered');
      this.handleConfirmClearSnapshots(ctx);
    });
    this.bot.action('confirm_clear_anomalies', (ctx) => {
      console.log('‚úÖ confirm_clear_anomalies action triggered');
      this.handleConfirmClearAnomalies(ctx);
    });
    this.bot.action('confirm_clear_all', (ctx) => {
      console.log('‚úÖ confirm_clear_all action triggered');
      this.handleConfirmClearAll(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    this.bot.on('text', async (ctx) => {
      const text = ctx.message.text;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      if (text === 'üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä') {
        console.log('üîç Parse games from persistent keyboard');
        this.handleParseGames(ctx);
        return;
      }
      
      if (text === 'üö® –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π') {
        console.log('üö® Find anomalies from persistent keyboard');
        this.handleFindAnomalies(ctx);
        return;
      }
      
      if (text === '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏') {
        console.log('‚öôÔ∏è Settings from persistent keyboard');
        this.handleSettings(ctx);
        return;
      }
      
      if (text === 'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö') {
        console.log('üóÑÔ∏è Database menu from persistent keyboard');
        this.handleDatabaseMenu(ctx);
        return;
      }
      
      if (text === 'üìä –°—Ç–∞—Ç—É—Å') {
        console.log('üìä Status from persistent keyboard');
        this.handleStatus(ctx);
        return;
      }
      
      if (text === '‚ùå –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É') {
        console.log('‚ùå Hide keyboard from persistent keyboard');
        ctx.reply('‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –î–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /keyboard', 
          Markup.removeKeyboard());
        return;
      }
      
      if (this.waitingForNSigma) {
        const text = ctx.message.text;
        const nSigma = parseFloat(text);
        
        if (isNaN(nSigma) || nSigma < 1.0 || nSigma > 10.0) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1.0 –¥–æ 10.0');
          return;
        }
        
        const settings = getAnomalySettings();
        updateAnomalySettings(nSigma, settings.min_delta_threshold);
        
        await ctx.reply(
          `‚úÖ NœÉ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${nSigma}\n\n` +
          `–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
          `‚Ä¢ NœÉ: ${nSigma}\n` +
          `‚Ä¢ –ú–∏–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${settings.min_delta_threshold}`,
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'settings')]
          ])
        );
        
        this.waitingForNSigma = false;
        return;
      }
      
      if (this.waitingForMinDelta) {
        const text = ctx.message.text;
        const minDelta = parseInt(text);
        
        if (isNaN(minDelta) || minDelta < 1 || minDelta > 100) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100');
          return;
        }
        
        const settings = getAnomalySettings();
        updateAnomalySettings(settings.n_sigma, minDelta);
        
        await ctx.reply(
          `‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${minDelta}\n\n` +
          `–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
          `‚Ä¢ NœÉ: ${settings.n_sigma}\n` +
          `‚Ä¢ –ú–∏–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${minDelta}`,
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'settings')]
          ])
        );
        
        this.waitingForMinDelta = false;
        return;
      }
      
      if (this.waitingForCustomMessage) {
        const text = ctx.message.text;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–º–µ–Ω—ã
        if (text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞' || text.toLowerCase() === 'cancel') {
          await ctx.reply(
            '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',
            Markup.inlineKeyboard([
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'settings')]
            ])
          );
          this.waitingForCustomMessage = false;
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π —Å–±—Ä–æ—Å–∞
        if (text.toLowerCase() === '—Å–±—Ä–æ—Å' || text.toLowerCase() === 'reset') {
          updateCustomMessage(null);
          await ctx.reply(
            '‚úÖ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ!\n\n' +
            'üîÑ –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.',
            Markup.inlineKeyboard([
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'settings')]
            ])
          );
          this.waitingForCustomMessage = false;
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        updateCustomMessage(text);
        
        await ctx.reply(
          `‚úÖ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n` +
          `üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${text}\n\n` +
          `üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n` +
          `‚Ä¢ {game_title} - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã\n` +
          `‚Ä¢ {direction} - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (üìà –†–û–°–¢/üìâ –ü–ê–î–ï–ù–ò–ï)\n` +
          `‚Ä¢ {delta} - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω–∞\n` +
          `‚Ä¢ {n_sigma} - –∑–Ω–∞—á–µ–Ω–∏–µ NœÉ\n` +
          `‚Ä¢ {threshold} - –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n` +
          `‚Ä¢ {current_online} - —Ç–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω\n` +
          `‚Ä¢ {mean} - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n` +
          `‚Ä¢ {stddev} - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ\n` +
          `‚Ä¢ {game_url} - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É\n` +
          `‚Ä¢ {timestamp} - –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è\n\n` +
          `üîÑ –î–ª—è —Å–±—Ä–æ—Å–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "—Å–±—Ä–æ—Å"`,
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'settings')]
          ])
        );
        
        this.waitingForCustomMessage = false;
        return;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err, ctx) => {
      console.error('Telegram bot error:', err);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
  }

  private getMainKeyboard() {
    return Markup.inlineKeyboard([
      [Markup.button.callback('üîç –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä', 'parse_games')],
      [Markup.button.callback('üö® –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π', 'find_anomalies')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')],
      [Markup.button.callback('üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', 'database_menu')]
    ]);
  }

  private getPersistentKeyboard() {
    return Markup.keyboard([
      ['üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä', 'üö® –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π'],
      ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'],
      ['üìä –°—Ç–∞—Ç—É—Å', '‚ùå –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É']
    ]).resize().persistent();
  }

  private async handleParseGames(ctx: any) {
    console.log('üîç Parse games button clicked');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä
    if (this.isGameParsingActive) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback query –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (ctx.callbackQuery) {
        await ctx.editMessageText(
          '‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!\n\n' +
          'üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n' +
          'üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"',
          { reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üõë –û—Ç–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥', 'cancel_game_parsing')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
          ]).reply_markup }
        );
      } else {
        await ctx.reply(
          '‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω!\n\n' +
          'üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n' +
          'üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
          Markup.inlineKeyboard([
            [Markup.button.callback('üõë –û—Ç–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥', 'cancel_game_parsing')]
          ])
        );
      }
      return;
    }
    
    try {
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
      if (ctx.callbackQuery) {
        try {
          console.log('üì§ Answering callback query...');
          await ctx.answerCbQuery('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...', { show_alert: false });
        } catch (cbError) {
          console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
        }
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–≥—Ä
      this.isGameParsingActive = true;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      if (ctx.callbackQuery) {
        console.log('üìù Editing message...');
        await ctx.editMessageText(
          'üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\nüõë –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
          { reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üõë –û—Ç–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥', 'cancel_game_parsing')]
          ]).reply_markup }
        );
      } else {
        console.log('üìù Sending message...');
        await ctx.reply(
          'üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\nüõë –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
          Markup.inlineKeyboard([
            [Markup.button.callback('üõë –û—Ç–º–µ–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥', 'cancel_game_parsing')]
          ])
        );
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
      console.log('üöÄ Starting parseNewGames...');
      
      try {
        const result = await parseNewGames();
        console.log('‚úÖ Parse completed:', result);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if (!this.isGameParsingActive) {
          console.log('üõë Parsing was stopped by user, not sending completion message');
          return;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        this.isGameParsingActive = false;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (ctx.callbackQuery) {
          console.log('üì® Editing results...');
          await ctx.editMessageText(
            `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n` +
            `üÜï –ù–æ–≤—ã—Ö –∏–≥—Ä: ${result.newGames}\n` +
            `üìä –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${result.realGameCount}\n` +
            `‚ùå –û—à–∏–±–æ–∫: ${result.errors}`,
            { reply_markup: this.getMainKeyboard().reply_markup }
          );
        } else {
          console.log('üì® Sending results...');
          await ctx.reply(
            `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n` +
            `üÜï –ù–æ–≤—ã—Ö –∏–≥—Ä: ${result.newGames}\n` +
            `üìä –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${result.realGameCount}\n` +
            `‚ùå –û—à–∏–±–æ–∫: ${result.errors}`,
            this.getPersistentKeyboard()
          );
        }
        console.log('‚úÖ Results sent successfully');
      } catch (parseError) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this.isGameParsingActive = false;
        console.error('‚ùå Parse error:', parseError);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if (!this.isGameParsingActive) {
          console.log('üõë Parsing was stopped by user, not sending error message');
          return;
        }
        
        throw parseError; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ catch –±–ª–æ–∫–µ
      }
    } catch (error) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.isGameParsingActive = false;
      console.error('‚ùå Parse games error:', error);
      try {
        if (ctx.callbackQuery) {
          await ctx.editMessageText(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–≥—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
            { reply_markup: this.getMainKeyboard().reply_markup }
          );
        } else {
          await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–≥—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
            this.getPersistentKeyboard()
          );
        }
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleFindAnomalies(ctx: any) {
    try {
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery('üö® –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π...', { show_alert: false });
      }
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–∞—Ä—Å–∏–Ω–≥
    if (this.isParsingActive) {
      if (ctx.callbackQuery) {
        await ctx.reply(
          '‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!\n\n' +
          'üîÑ –ö—Ä—É–≥–æ–≤–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–Ω–ª–∞–π–Ω–∞ –∏–≥—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n' +
          'üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop_parsing',
          this.getMainKeyboard()
        );
      } else {
        await ctx.reply(
          '‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!\n\n' +
          'üîÑ –ö—Ä—É–≥–æ–≤–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–Ω–ª–∞–π–Ω–∞ –∏–≥—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n' +
          'üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"',
          this.getPersistentKeyboard()
        );
      }
      return;
    }
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.isParsingActive = true;
      this.parsingStartTime = Date.now();
      this.parsingStats = {
        totalProcessed: 0,
        successfulParses: 0,
        failedParses: 0,
        lastGameTitle: '',
        completedCycles: 0,
        lastGameIndex: -1
      };
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π
      const settings = getAnomalySettings();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
      await ctx.reply(
        'üö® –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π...\n\n' +
        'üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫—Ä—É–≥–æ–≤–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–Ω–ª–∞–π–Ω–∞ –∏–≥—Ä —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ Roblox.\n' +
        'üìä –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é –∏–≥—Ä—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–Ω–æ–º–∞–ª–∏–π.\n' +
        'üö® –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞–Ω–æ–º–∞–ª–∏–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç.\n' +
        '‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n\n' +
        `‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π:\n` +
        `‚Ä¢ NœÉ (—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥): ${settings.n_sigma}\n` +
        `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${settings.min_delta_threshold} –∏–≥—Ä–æ–∫–æ–≤`
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä—É–≥–æ–≤–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞ 24 —á–∞—Å–∞ (86400000 –º—Å) - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
      const durationMs = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
      let progressMessage: any = null;
      let lastUpdateTime = 0;
      
      const result = await startCircularParsingForDuration(
        durationMs,
        (current, total, gameTitle, successfulParses, failedParses) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞—Ä—Å–∏–Ω–≥
          if (!this.isParsingActive) {
            return;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          this.parsingStats.totalProcessed = current;
          this.parsingStats.lastGameTitle = gameTitle;
          this.parsingStats.successfulParses = successfulParses;
          this.parsingStats.failedParses = failedParses;
          
          // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø–µ—Ä–≤–æ–π –∏–≥—Ä–µ (current === 1) –∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏–≥—Ä–∞ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤ —Å–ø–∏—Å–∫–µ
          if (current === 1 && this.parsingStats.lastGameIndex === total) {
            this.parsingStats.completedCycles++;
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–≥—Ä—ã
          this.parsingStats.lastGameIndex = current;
          
          const now = Date.now();
          const elapsedTime = now - this.parsingStartTime;
          const elapsedMinutes = Math.floor(elapsedTime / 60000);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –∏–≥—Ä –∏–ª–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
          if (current % 5 === 0 || current === 1 || now - lastUpdateTime > 10000) {
            lastUpdateTime = now;
            
            const progressText = `üö® –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π (–ö–†–£–ì–õ–û–°–£–¢–û–ß–ù–û)...\n\n` +
              `üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–≥—Ä: ${current}/${total}\n` +
              `üéÆ –¢–µ–∫—É—â–∞—è –∏–≥—Ä–∞: ${gameTitle}\n` +
              `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${elapsedMinutes} –º–∏–Ω\n` +
              `üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫—Ä—É–≥–æ–≤: ${this.parsingStats.completedCycles}\n` +
              `üìä –£—Å–ø–µ—à–Ω–æ: ${this.parsingStats.successfulParses} | –û—à–∏–±–æ–∫: ${this.parsingStats.failedParses}\n` +
              `‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...`;
            
            const progressKeyboard = Markup.inlineKeyboard([
              [Markup.button.callback('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥', 'cancel_parsing')]
            ]);
            
            if (progressMessage) {
              try {
                ctx.telegram.editMessageText(
                  ctx.chat!.id,
                  progressMessage.message_id,
                  undefined,
                  progressText,
                  { reply_markup: progressKeyboard.reply_markup }
                );
              } catch (editError) {
                console.log('‚ö†Ô∏è Could not update progress message:', editError);
              }
            } else {
              // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
              ctx.telegram.sendMessage(
                ctx.chat!.id,
                progressText,
                { reply_markup: progressKeyboard.reply_markup }
              ).then((msg: any) => {
                progressMessage = msg;
              }).catch((err: any) => {
                console.log('‚ö†Ô∏è Could not send progress message:', err);
              });
            }
          }
        },
        () => !this.isParsingActive  // Callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      );

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
      this.isParsingActive = false;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
       await ctx.reply(
         `üõë –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n` +
         `‚úÖ –ö—Ä—É–≥–æ–≤–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–Ω–ª–∞–π–Ω–∞ –∏–≥—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n` +
         `üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫—Ä—É–≥–æ–≤: ${result.totalCycles}\n` +
         `üìä –í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n` +
         `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
         `üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: ${result.totalGames}\n` +
         `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.successfulParses}\n` +
         `‚ùå –û—à–∏–±–æ–∫: ${result.failedParses}\n` +
         `‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É: ${result.averageTimePerGame}–º—Å\n\n` +
         `üö® –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π"`,
         this.getPersistentKeyboard()
       );

      console.log('‚úÖ Anomaly search completed:', result);
      
    } catch (error) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.isParsingActive = false;
      console.error('‚ùå Anomaly search error:', error);
      try {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–æ–º–∞–ª–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
          this.getPersistentKeyboard()
        );
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleSettings(ctx: any) {
    try {
      await ctx.answerCbQuery('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settings = getAnomalySettings();
    
    const customMessagePreview = settings.custom_message 
      ? `\n‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${settings.custom_message.length > 50 ? settings.custom_message.substring(0, 50) + '...' : settings.custom_message}`
      : '\n‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ';
    
    if (ctx.callbackQuery) {
      await ctx.reply(
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π\n\n' +
        `üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
        `‚Ä¢ NœÉ (—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥): ${settings.n_sigma}\n` +
        `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${settings.min_delta_threshold} –∏–≥—Ä–æ–∫–æ–≤${customMessagePreview}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:',
        Markup.inlineKeyboard([
          [Markup.button.callback(`üìä NœÉ (${settings.n_sigma})`, 'settings_n_sigma')],
          [Markup.button.callback(`üë• –ú–∏–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ (${settings.min_delta_threshold})`, 'settings_min_delta')],
          [Markup.button.callback('üí¨ –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'settings_custom_message')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
        ])
      );
    } else {
      await ctx.reply(
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π\n\n' +
        `üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n` +
        `‚Ä¢ NœÉ (—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥): ${settings.n_sigma}\n` +
        `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${settings.min_delta_threshold} –∏–≥—Ä–æ–∫–æ–≤${customMessagePreview}\n\n` +
        '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '‚Ä¢ /settings_n_sigma - –∏–∑–º–µ–Ω–∏—Ç—å NœÉ\n' +
        '‚Ä¢ /settings_min_delta - –∏–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ\n' +
        '‚Ä¢ /settings_custom_message - –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        this.getPersistentKeyboard()
      );
    }
  }

  private async handleExportDb(ctx: any) {
    try {
      try {
        await ctx.answerCbQuery('üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...', { show_alert: false });
      } catch (cbError) {
        console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
      }
      await ctx.reply('üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');

      console.log('üîÑ Syncing database before export...');
      
      try {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.pragma('synchronous = FULL');
        db.pragma('journal_mode = DELETE');
        db.pragma('wal_checkpoint(FULL)');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (syncError) {
        console.log('‚ö†Ô∏è Database sync failed, continuing with export...', syncError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
      }
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      const dbPath = config.DB_PATH;
      const tempPath = path.join(__dirname, '..', 'temp_export.db');
      
      console.log('üìÅ Creating clean database export...');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é VACUUM INTO
      // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
      let exportSuccess = false;
      
      try {
        db.prepare(`VACUUM INTO '${tempPath}'`).run();
        console.log('‚úÖ VACUUM INTO completed successfully');
        exportSuccess = true;
      } catch (vacuumError) {
        console.log('‚ö†Ô∏è VACUUM INTO failed, trying alternative method...', vacuumError);
        
        try {
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –∏ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
          const tempDb = require('better-sqlite3')(tempPath);
          
          // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ö–µ–º—É
          const schema = db.prepare("SELECT sql FROM sqlite_master WHERE type='table'").all() as Array<{ sql: string }>;
          for (const table of schema) {
            if (table.sql) {
              tempDb.exec(table.sql);
            }
          }
          
          // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
          const tables = ['games', 'snapshots', 'anomalies', 'anomaly_settings'];
          for (const tableName of tables) {
            try {
              const data = db.prepare(`SELECT * FROM ${tableName}`).all();
              if (data.length > 0) {
                const insertStmt = tempDb.prepare(`INSERT INTO ${tableName} SELECT * FROM main.${tableName}`);
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                for (const row of data as Array<Record<string, any>>) {
                  const columns = Object.keys(row);
                  const values = Object.values(row);
                  const placeholders = columns.map(() => '?').join(', ');
                  const insertQuery = `INSERT INTO ${tableName} (${columns.join(', ')}) VALUES (${placeholders})`;
                  tempDb.prepare(insertQuery).run(...values);
                }
              }
            } catch (tableError) {
              console.log(`‚ö†Ô∏è Could not copy table ${tableName}:`, tableError);
            }
          }
          
          tempDb.close();
          console.log('‚úÖ Alternative export method completed');
          exportSuccess = true;
        } catch (altError) {
          console.log('‚ö†Ô∏è Alternative export failed, using simple file copy');
          // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
          fs.copyFileSync(dbPath, tempPath);
          exportSuccess = true;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
      const stats = fs.statSync(tempPath);
      console.log(`üìä Exported database size: ${stats.size} bytes`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ
      let gameCount = 0;
      try {
        const tempDb = require('better-sqlite3')(tempPath);
        const countResult = tempDb.prepare('SELECT COUNT(*) as count FROM games').get() as { count: number };
        gameCount = countResult.count;
        tempDb.close();
        console.log(`üéÆ Games in exported database: ${gameCount}`);
      } catch (countError) {
        console.log('‚ö†Ô∏è Could not count games in exported database:', countError);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      await ctx.replyWithDocument(
        { source: tempPath, filename: 'roblox_monitor.db' },
        {
          caption: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n' +
                   `üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(stats.size / 1024)} KB\n` +
                   `üéÆ –ò–≥—Ä –≤ –±–∞–∑–µ: ${gameCount}\n` +
                   '–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∏–≥—Ä–∞—Ö –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.'
        }
      );

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(tempPath);
      console.log('üóëÔ∏è Temporary file deleted');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await ctx.reply(
        '‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!',
        this.getMainKeyboard()
      );
    } catch (error) {
      console.error('‚ùå Export DB error:', error);
      try {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
          this.getMainKeyboard()
        );
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleStatus(ctx: any) {
    try {
      const now = Date.now();
      const elapsedTime = this.parsingStartTime > 0 ? now - this.parsingStartTime : 0;
      const elapsedMinutes = Math.floor(elapsedTime / 60000);
      const elapsedHours = Math.floor(elapsedMinutes / 60);
      
      if (!this.isParsingActive) {
        if (ctx.callbackQuery) {
          await ctx.reply(
            'üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞\n\n' +
            'üî¥ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω\n\n' +
            'üö® –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π"',
            this.getMainKeyboard()
          );
        } else {
          await ctx.reply(
            'üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞\n\n' +
            'üî¥ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω\n\n' +
            'üö® –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π"',
            this.getPersistentKeyboard()
          );
        }
        return;
      }

      const statusText = `üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞\n\n` +
        `üü¢ –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω\n` +
        `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${elapsedHours}—á ${elapsedMinutes % 60}–º\n` +
        `üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–≥—Ä: ${this.parsingStats.totalProcessed}\n` +
        `üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫—Ä—É–≥–æ–≤: ${this.parsingStats.completedCycles}\n` +
        `üìä –£—Å–ø–µ—à–Ω–æ: ${this.parsingStats.successfulParses} | –û—à–∏–±–æ–∫: ${this.parsingStats.failedParses}\n` +
        `üéÆ –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞: ${this.parsingStats.lastGameTitle}`;
      
      if (ctx.callbackQuery) {
        await ctx.reply(statusText, this.getMainKeyboard());
      } else {
        await ctx.reply(statusText, this.getPersistentKeyboard());
      }
      
    } catch (error) {
      console.error('‚ùå Status error:', error);
      try {
        if (ctx.callbackQuery) {
          await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
            this.getMainKeyboard()
          );
        } else {
          await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
            this.getPersistentKeyboard()
          );
        }
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleStopParsing(ctx: any) {
    try {
      if (!this.isParsingActive) {
        if (ctx.callbackQuery) {
          await ctx.reply(
            '‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω!\n\n' +
            'üîÑ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—Ä—É–≥–æ–≤–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.\n' +
            'üö® –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π"',
            this.getMainKeyboard()
          );
        } else {
          await ctx.reply(
            '‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω!\n\n' +
            'üîÑ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—Ä—É–≥–æ–≤–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.\n' +
            'üö® –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π"',
            this.getPersistentKeyboard()
          );
        }
        return;
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
      this.isParsingActive = false;
      
      console.log('üõë Parsing stopped by user command');
    } catch (error) {
      console.error('‚ùå Stop parsing error:', error);
      try {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
          this.getMainKeyboard()
        );
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleBackToMain(ctx: any) {
    try {
      await ctx.answerCbQuery('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    await ctx.editMessageText(
      'ü§ñ Roblox Monitor Bot\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { reply_markup: this.getMainKeyboard().reply_markup }
    );
  }

  private async handleBackToMainWithPersistentKeyboard(ctx: any) {
    await ctx.reply(
      'ü§ñ Roblox Monitor Bot\n\n' +
      'üì± –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:',
      this.getPersistentKeyboard()
    );
  }


  private async handleTestNotification(ctx: any) {
    try {
      await ctx.answerCbQuery('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...', { show_alert: false });
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    try {
      await ctx.reply('üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

      const success = await sendTestNotification();
      
      if (success) {
        if (ctx.callbackQuery) {
          await ctx.reply(
            '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n' +
            'üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
            this.getMainKeyboard()
          );
        } else {
          await ctx.reply(
            '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n' +
            'üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
            this.getPersistentKeyboard()
          );
        }
      } else {
        if (ctx.callbackQuery) {
          await ctx.reply(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n' +
            'üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID.',
            this.getMainKeyboard()
          );
        } else {
          await ctx.reply(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n' +
            'üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID.',
            this.getPersistentKeyboard()
          );
        }
      }
      
    } catch (error) {
      console.error('‚ùå Test notification error:', error);
      try {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
          this.getMainKeyboard()
        );
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleSettingsNSigma(ctx: any) {
    try {
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery('üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NœÉ');
      }
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    const settings = getAnomalySettings();
    
    if (ctx.callbackQuery) {
      await ctx.reply(
        `üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (NœÉ)\n\n` +
        `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${settings.n_sigma}\n\n` +
        `NœÉ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:\n` +
        `‚Ä¢ 2œÉ - –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ (–±–æ–ª—å—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)\n` +
        `‚Ä¢ 3œÉ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n` +
        `‚Ä¢ 4œÉ - –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)\n` +
        `‚Ä¢ 5œÉ - –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–æ (—Ç–æ–ª—å–∫–æ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NœÉ (–æ—Ç 1.0 –¥–æ 10.0):`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'settings')]
        ])
      );
    } else {
      await ctx.reply(
        `üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (NœÉ)\n\n` +
        `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${settings.n_sigma}\n\n` +
        `NœÉ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π:\n` +
        `‚Ä¢ 2œÉ - –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ (–±–æ–ª—å—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)\n` +
        `‚Ä¢ 3œÉ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n` +
        `‚Ä¢ 4œÉ - –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)\n` +
        `‚Ä¢ 5œÉ - –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–æ (—Ç–æ–ª—å–∫–æ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NœÉ (–æ—Ç 1.0 –¥–æ 10.0):`,
        this.getPersistentKeyboard()
      );
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ NœÉ
    this.waitingForNSigma = true;
    this.waitingForMinDelta = false;
  }

  private async handleSettingsMinDelta(ctx: any) {
    try {
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery('üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
      }
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    const settings = getAnomalySettings();
    
    if (ctx.callbackQuery) {
      await ctx.reply(
        `üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n` +
        `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${settings.min_delta_threshold} –∏–≥—Ä–æ–∫–æ–≤\n\n` +
        `–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–∏:\n` +
        `‚Ä¢ 5 - –æ—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ\n` +
        `‚Ä¢ 10 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n` +
        `‚Ä¢ 20 - –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ\n` +
        `‚Ä¢ 50 - —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 1 –¥–æ 100):`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'settings')]
        ])
      );
    } else {
      await ctx.reply(
        `üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n` +
        `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${settings.min_delta_threshold} –∏–≥—Ä–æ–∫–æ–≤\n\n` +
        `–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–∏:\n` +
        `‚Ä¢ 5 - –æ—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ\n` +
        `‚Ä¢ 10 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n` +
        `‚Ä¢ 20 - –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ\n` +
        `‚Ä¢ 50 - —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 1 –¥–æ 100):`,
        this.getPersistentKeyboard()
      );
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    this.waitingForMinDelta = true;
    this.waitingForNSigma = false;
  }

  private async handleSettingsCustomMessage(ctx: any) {
    try {
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery('üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    const settings = getAnomalySettings();
    
    if (ctx.callbackQuery) {
      await ctx.reply(
        `üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n` +
        `üìù –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${settings.custom_message || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}\n\n` +
        `üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏:\n` +
        `‚Ä¢ {game_title} - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã\n` +
        `‚Ä¢ {direction} - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (üìà –†–û–°–¢/üìâ –ü–ê–î–ï–ù–ò–ï)\n` +
        `‚Ä¢ {delta} - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω–∞\n` +
        `‚Ä¢ {n_sigma} - –∑–Ω–∞—á–µ–Ω–∏–µ NœÉ\n` +
        `‚Ä¢ {threshold} - –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n` +
        `‚Ä¢ {current_online} - —Ç–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω\n` +
        `‚Ä¢ {mean} - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n` +
        `‚Ä¢ {stddev} - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ\n` +
        `‚Ä¢ {game_url} - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É\n` +
        `‚Ä¢ {timestamp} - –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ "—Å–±—Ä–æ—Å" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É):`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', 'settings')]
        ])
      );
    } else {
      await ctx.reply(
        `üí¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n` +
        `üìù –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${settings.custom_message || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}\n\n` +
        `üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏:\n` +
        `‚Ä¢ {game_title} - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã\n` +
        `‚Ä¢ {direction} - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (üìà –†–û–°–¢/üìâ –ü–ê–î–ï–ù–ò–ï)\n` +
        `‚Ä¢ {delta} - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω–∞\n` +
        `‚Ä¢ {n_sigma} - –∑–Ω–∞—á–µ–Ω–∏–µ NœÉ\n` +
        `‚Ä¢ {threshold} - –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n` +
        `‚Ä¢ {current_online} - —Ç–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω\n` +
        `‚Ä¢ {mean} - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n` +
        `‚Ä¢ {stddev} - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ\n` +
        `‚Ä¢ {game_url} - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä—É\n` +
        `‚Ä¢ {timestamp} - –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ "—Å–±—Ä–æ—Å" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É):`,
        this.getPersistentKeyboard()
      );
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.waitingForCustomMessage = true;
    this.waitingForNSigma = false;
    this.waitingForMinDelta = false;
  }

  private async handleCleanupData(ctx: any) {
    try {
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery('üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', { show_alert: false });
      }
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    try {
      await ctx.reply('üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
      const cleanupResult = performDataCleanup();
      
      if (ctx.callbackQuery) {
        await ctx.reply(
          `‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
          `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:\n` +
          `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: ${cleanupResult.snapshotsDeleted}\n` +
          `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π: ${cleanupResult.anomaliesDeleted}\n` +
          `‚Ä¢ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${cleanupResult.totalDeleted}\n\n` +
          `üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞.`,
          this.getMainKeyboard()
        );
      } else {
        await ctx.reply(
          `‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
          `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:\n` +
          `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: ${cleanupResult.snapshotsDeleted}\n` +
          `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π: ${cleanupResult.anomaliesDeleted}\n` +
          `‚Ä¢ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${cleanupResult.totalDeleted}\n\n` +
          `üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞.`,
          this.getPersistentKeyboard()
        );
      }
      
    } catch (error) {
      console.error('‚ùå Cleanup data error:', error);
      try {
        if (ctx.callbackQuery) {
          await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
            this.getMainKeyboard()
          );
        } else {
          await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
            this.getPersistentKeyboard()
          );
        }
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleDatabaseMenu(ctx: any) {
    try {
      await ctx.answerCbQuery('üóÑÔ∏è –ú–µ–Ω—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const gamesCount = db.prepare('SELECT COUNT(*) as count FROM games').get() as { count: number };
    const snapshotsCount = db.prepare('SELECT COUNT(*) as count FROM snapshots').get() as { count: number };
    const anomaliesCount = db.prepare('SELECT COUNT(*) as count FROM anomalies').get() as { count: number };
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbPath = config.DB_PATH;
    const fs = require('fs');
    let dbSize = 0;
    try {
      const stats = fs.statSync(dbPath);
      dbSize = stats.size;
    } catch (error) {
      console.log('Could not get database size:', error);
    }
    
    const dbSizeKB = Math.round(dbSize / 1024);
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(
        'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n\n' +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `‚Ä¢ –ò–≥—Ä: ${gamesCount.count}\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç–æ–≤: ${snapshotsCount.count}\n` +
        `‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–π: ${anomaliesCount.count}\n` +
        `‚Ä¢ –†–∞–∑–º–µ—Ä: ${dbSizeKB} KB\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'export_db')],
          [Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'db_stats')],
          [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞', 'db_cleanup_menu')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
        ]).reply_markup }
      );
    } else {
      await ctx.reply(
        'üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n\n' +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `‚Ä¢ –ò–≥—Ä: ${gamesCount.count}\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç–æ–≤: ${snapshotsCount.count}\n` +
        `‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–π: ${anomaliesCount.count}\n` +
        `‚Ä¢ –†–∞–∑–º–µ—Ä: ${dbSizeKB} KB\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
          [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'export_db')],
          [Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'db_stats')],
          [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞', 'db_cleanup_menu')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
        ])
      );
    }
  }

  private async handleDatabaseStats(ctx: any) {
    try {
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', { show_alert: false });
      }
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const gamesCount = db.prepare('SELECT COUNT(*) as count FROM games').get() as { count: number };
      const snapshotsCount = db.prepare('SELECT COUNT(*) as count FROM snapshots').get() as { count: number };
      const anomaliesCount = db.prepare('SELECT COUNT(*) as count FROM anomalies').get() as { count: number };
      const notifiedAnomalies = db.prepare('SELECT COUNT(*) as count FROM anomalies WHERE notified = 1').get() as { count: number };
      const unnotifiedAnomalies = db.prepare('SELECT COUNT(*) as count FROM anomalies WHERE notified = 0').get() as { count: number };
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      const oldestSnapshot = db.prepare('SELECT MIN(timestamp) as oldest FROM snapshots').get() as { oldest: number };
      const newestSnapshot = db.prepare('SELECT MAX(timestamp) as newest FROM snapshots').get() as { newest: number };
      const oldestAnomaly = db.prepare('SELECT MIN(timestamp) as oldest FROM anomalies').get() as { oldest: number };
      const newestAnomaly = db.prepare('SELECT MAX(timestamp) as newest FROM anomalies').get() as { newest: number };
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dbPath = config.DB_PATH;
      const fs = require('fs');
      let dbSize = 0;
      try {
        const stats = fs.statSync(dbPath);
        dbSize = stats.size;
      } catch (error) {
        console.log('Could not get database size:', error);
      }
      
      const dbSizeKB = Math.round(dbSize / 1024);
      const dbSizeMB = Math.round(dbSize / (1024 * 1024) * 100) / 100;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
      const formatDate = (timestamp: number) => {
        if (!timestamp) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
        return new Date(timestamp).toLocaleString('ru-RU');
      };
      
      const statsText = `üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n` +
        `üìà –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n` +
        `‚Ä¢ –ò–≥—Ä: ${gamesCount.count}\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç–æ–≤: ${snapshotsCount.count}\n` +
        `‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–π: ${anomaliesCount.count}\n\n` +
        `üö® –ê–Ω–æ–º–∞–ª–∏–∏:\n` +
        `‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: ${notifiedAnomalies.count}\n` +
        `‚Ä¢ –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: ${unnotifiedAnomalies.count}\n\n` +
        `üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç—ã: ${formatDate(oldestSnapshot.oldest)} - ${formatDate(newestSnapshot.newest)}\n` +
        `‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–∏: ${formatDate(oldestAnomaly.oldest)} - ${formatDate(newestAnomaly.newest)}\n\n` +
        `üíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbSizeKB} KB (${dbSizeMB} MB)`;
      
      if (ctx.callbackQuery) {
        await ctx.editMessageText(
          statsText,
          { reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'db_stats')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'database_menu')]
          ]).reply_markup }
        );
      } else {
        await ctx.reply(
          statsText,
          this.getPersistentKeyboard()
        );
      }
      
    } catch (error) {
      console.error('‚ùå Database stats error:', error);
      try {
        if (ctx.callbackQuery) {
          await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
            Markup.inlineKeyboard([
              [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'database_menu')]
            ])
          );
        } else {
          await ctx.reply(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
            this.getPersistentKeyboard()
          );
        }
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleCancelGameParsing(ctx: any) {
    try {
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery('üõë –û—Ç–º–µ–Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–≥—Ä...', { show_alert: false });
      }
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    if (!this.isGameParsingActive) {
      if (ctx.callbackQuery) {
        await ctx.editMessageText(
          '‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!\n\n' +
          'üîÑ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.'
        );
      } else {
        await ctx.reply(
          '‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!\n\n' +
          'üîÑ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.',
          this.getPersistentKeyboard()
        );
      }
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä
    this.isGameParsingActive = false;
    
    console.log('üõë Game parsing stopped by user command');
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(
        'üõë –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n' +
        '‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'
      );
    } else {
      await ctx.reply(
        'üõë –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n' +
        '‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.',
        this.getPersistentKeyboard()
      );
    }
  }

  public async start() {
    try {
      console.log('üöÄ Launching Telegram bot...');
      await this.bot.launch();
      console.log('ü§ñ Telegram bot started successfully');
    } catch (error) {
      console.error('‚ùå Failed to start Telegram bot:', error);
      throw error;
    }
  }

  public async stop() {
    try {
      await this.bot.stop();
      console.log('ü§ñ Telegram bot stopped');
    } catch (error) {
      console.error('Error stopping Telegram bot:', error);
    }
  }

  private async handleDatabaseCleanupMenu(ctx: any) {
    try {
      await ctx.answerCbQuery('üóëÔ∏è –ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = getDatabaseStats();
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(
        'üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n' +
        `üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n` +
        `‚Ä¢ –ò–≥—Ä: ${stats.games}\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç–æ–≤: ${stats.snapshots}\n` +
        `‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–π: ${stats.anomalies}\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.total}\n\n` +
        '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å:',
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üéÆ –û—á–∏—Å—Ç–∏—Ç—å –∏–≥—Ä—ã', 'clear_games')],
          [Markup.button.callback('üì∏ –û—á–∏—Å—Ç–∏—Ç—å —Å–Ω–∞–ø—à–æ—Ç—ã', 'clear_snapshots')],
          [Markup.button.callback('üö® –û—á–∏—Å—Ç–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏', 'clear_anomalies')],
          [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –í–°–Å', 'clear_all_data')],
          [Markup.button.callback('üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ', 'cleanup_data')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'database_menu')]
        ]).reply_markup }
      );
    } else {
      await ctx.reply(
        'üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n' +
        `üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n` +
        `‚Ä¢ –ò–≥—Ä: ${stats.games}\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç–æ–≤: ${stats.snapshots}\n` +
        `‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–π: ${stats.anomalies}\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.total}\n\n` +
        '‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!',
        this.getPersistentKeyboard()
      );
    }
  }

  private async handleClearGames(ctx: any) {
    try {
      await ctx.answerCbQuery('üéÆ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    const stats = getDatabaseStats();
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(
        'üéÆ –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä\n\n' +
        `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –∏–≥—Ä—ã (${stats.games} –∑–∞–ø–∏—Å–µ–π)!\n\n` +
        `üìä –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n` +
        `‚Ä¢ –ò–≥—Ä: ${stats.games}\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç–æ–≤: ${stats.snapshots} (–∏–∑-–∑–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)\n` +
        `‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–π: ${stats.anomalies} (–∏–∑-–∑–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)\n\n` +
        `‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n\n` +
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:`,
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–ê, —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—ã', 'confirm_clear_games')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'db_cleanup_menu')]
        ]).reply_markup }
      );
    }
  }

  private async handleClearSnapshots(ctx: any) {
    try {
      await ctx.answerCbQuery('üì∏ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å–Ω–∞–ø—à–æ—Ç–æ–≤');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    const stats = getDatabaseStats();
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(
        'üì∏ –û—á–∏—Å—Ç–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–æ–≤\n\n' +
        `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï —Å–Ω–∞–ø—à–æ—Ç—ã (${stats.snapshots} –∑–∞–ø–∏—Å–µ–π)!\n\n` +
        `üìä –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç–æ–≤: ${stats.snapshots}\n\n` +
        `‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n\n` +
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:`,
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–ê, —É–¥–∞–ª–∏—Ç—å —Å–Ω–∞–ø—à–æ—Ç—ã', 'confirm_clear_snapshots')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'db_cleanup_menu')]
        ]).reply_markup }
      );
    }
  }

  private async handleClearAnomalies(ctx: any) {
    try {
      await ctx.answerCbQuery('üö® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    const stats = getDatabaseStats();
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(
        'üö® –û—á–∏—Å—Ç–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π\n\n' +
        `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –∞–Ω–æ–º–∞–ª–∏–∏ (${stats.anomalies} –∑–∞–ø–∏—Å–µ–π)!\n\n` +
        `üìä –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n` +
        `‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–π: ${stats.anomalies}\n\n` +
        `‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n\n` +
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:`,
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–ê, —É–¥–∞–ª–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏', 'confirm_clear_anomalies')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'db_cleanup_menu')]
        ]).reply_markup }
      );
    }
  }

  private async handleClearAllData(ctx: any) {
    try {
      await ctx.answerCbQuery('üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    const stats = getDatabaseStats();
    
    if (ctx.callbackQuery) {
      await ctx.editMessageText(
        'üóëÔ∏è –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•\n\n' +
        `‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!\n\n` +
        `üìä –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:\n` +
        `‚Ä¢ –ò–≥—Ä: ${stats.games}\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç–æ–≤: ${stats.snapshots}\n` +
        `‚Ä¢ –ê–Ω–æ–º–∞–ª–∏–π: ${stats.anomalies}\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.total}\n\n` +
        `‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n` +
        `üî• –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!\n\n` +
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:`,
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üî• –î–ê, —É–¥–∞–ª–∏—Ç—å –í–°–Å', 'confirm_clear_all')],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'db_cleanup_menu')]
        ]).reply_markup }
      );
    }
  }

  private async handleConfirmClearGames(ctx: any) {
    try {
      await ctx.answerCbQuery('üéÆ –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä...', { show_alert: false });
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    try {
      const result = clearGames();
      
      await ctx.editMessageText(
        `‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
        `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
        `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∏–≥—Ä: ${result.deletedCount}\n` +
        `‚Ä¢ –°–Ω–∞–ø—à–æ—Ç—ã –∏ –∞–Ω–æ–º–∞–ª–∏–∏ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)\n\n` +
        `üîÑ –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä"`,
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—á–∏—Å—Ç–∫–µ', 'db_cleanup_menu')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ]).reply_markup }
      );
    } catch (error) {
      console.error('‚ùå Clear games error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–≥—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—á–∏—Å—Ç–∫–µ', 'db_cleanup_menu')]
        ]).reply_markup }
      );
    }
  }

  private async handleConfirmClearSnapshots(ctx: any) {
    try {
      await ctx.answerCbQuery('üì∏ –û—á–∏—Å—Ç–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–æ–≤...', { show_alert: false });
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    try {
      const result = clearSnapshots();
      
      await ctx.editMessageText(
        `‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
        `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
        `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: ${result.deletedCount}\n\n` +
        `üîÑ –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å—Ç–∏—Ç–µ "–ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π"`,
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—á–∏—Å—Ç–∫–µ', 'db_cleanup_menu')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ]).reply_markup }
      );
    } catch (error) {
      console.error('‚ùå Clear snapshots error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–Ω–∞–ø—à–æ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—á–∏—Å—Ç–∫–µ', 'db_cleanup_menu')]
        ]).reply_markup }
      );
    }
  }

  private async handleConfirmClearAnomalies(ctx: any) {
    try {
      await ctx.answerCbQuery('üö® –û—á–∏—Å—Ç–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π...', { show_alert: false });
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    try {
      const result = clearAnomalies();
      
      await ctx.editMessageText(
        `‚úÖ –û—á–∏—Å—Ç–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
        `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
        `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π: ${result.deletedCount}\n\n` +
        `üîÑ –ù–æ–≤—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –±—É–¥—É—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ "–ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π"`,
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—á–∏—Å—Ç–∫–µ', 'db_cleanup_menu')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ]).reply_markup }
      );
    } catch (error) {
      console.error('‚ùå Clear anomalies error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–Ω–æ–º–∞–ª–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—á–∏—Å—Ç–∫–µ', 'db_cleanup_menu')]
        ]).reply_markup }
      );
    }
  }

  private async handleConfirmClearAll(ctx: any) {
    try {
      await ctx.answerCbQuery('üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...', { show_alert: false });
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    
    try {
      const beforeStats = getDatabaseStats();
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
      const gamesResult = clearGames();
      const snapshotsResult = clearSnapshots();
      const anomaliesResult = clearAnomalies();
      
      const afterStats = getDatabaseStats();
      
      await ctx.editMessageText(
        `‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
        `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
        `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∏–≥—Ä: ${gamesResult.deletedCount}\n` +
        `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: ${snapshotsResult.deletedCount}\n` +
        `‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π: ${anomaliesResult.deletedCount}\n` +
        `‚Ä¢ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: ${beforeStats.total - afterStats.total} –∑–∞–ø–∏—Å–µ–π\n\n` +
        `üîÑ –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:\n` +
        `1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä\n` +
        `2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ "–ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π" –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö`,
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—á–∏—Å—Ç–∫–µ', 'db_cleanup_menu')],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')]
        ]).reply_markup }
      );
    } catch (error) {
      console.error('‚ùå Clear all data error:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
        { reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –æ—á–∏—Å—Ç–∫–µ', 'db_cleanup_menu')]
        ]).reply_markup }
      );
    }
  }
}
