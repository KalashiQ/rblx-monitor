import { Telegraf, Markup } from 'telegraf';
import { config } from './config';
import { parseNewGames } from './populate';
import { db } from './db';
import * as fs from 'fs';
import * as path from 'path';

export class TelegramBot {
  private bot: Telegraf;

  constructor() {
    console.log('ü§ñ Creating TelegramBot instance...');
    if (!config.TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN is required');
    }
    
    console.log('üîë Bot token found:', config.TELEGRAM_BOT_TOKEN.substring(0, 10) + '...');
    this.bot = new Telegraf(config.TELEGRAM_BOT_TOKEN);
    this.setupHandlers();
    console.log('‚úÖ TelegramBot instance created');
  }

  private setupHandlers() {
    console.log('üîß Setting up handlers...');
    
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start((ctx) => {
      console.log('üëã /start command received');
      ctx.reply(
        'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Roblox Monitor Bot!\n\n' +
        '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –∏–≥—Ä–∞—Ö Roblox.',
        this.getMainKeyboard()
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.help((ctx) => {
      ctx.reply(
        'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
        'üîç –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä —Å Roblox\n' +
        'üö® –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π - –Ω–∞–π—Ç–∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã\n' +
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n' +
        'üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
        this.getMainKeyboard()
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    this.bot.action('parse_games', (ctx) => {
      console.log('üîç parse_games action triggered');
      this.handleParseGames(ctx);
    });
    this.bot.action('find_anomalies', (ctx) => {
      console.log('üö® find_anomalies action triggered');
      this.handleFindAnomalies(ctx);
    });
    this.bot.action('settings', (ctx) => {
      console.log('‚öôÔ∏è settings action triggered');
      this.handleSettings(ctx);
    });
    this.bot.action('export_db', (ctx) => {
      console.log('üì§ export_db action triggered');
      this.handleExportDb(ctx);
    });
    this.bot.action('back_to_main', (ctx) => {
      console.log('üè† back_to_main action triggered');
      this.handleBackToMain(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err, ctx) => {
      console.error('Telegram bot error:', err);
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    });
  }

  private getMainKeyboard() {
    return Markup.inlineKeyboard([
      [Markup.button.callback('üîç –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä', 'parse_games')],
      [Markup.button.callback('üö® –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π', 'find_anomalies')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')],
      [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'export_db')]
    ]);
  }

  private async handleParseGames(ctx: any) {
    console.log('üîç Parse games button clicked');
    try {
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
      try {
        console.log('üì§ Answering callback query...');
        await ctx.answerCbQuery('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...', { show_alert: false });
      } catch (cbError) {
        console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('üìù Sending new message...');
      await ctx.reply('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∏–≥—Ä...\n\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
      console.log('üöÄ Starting parseNewGames...');
      const result = await parseNewGames();
      console.log('‚úÖ Parse completed:', result);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      console.log('üì® Sending results...');
      await ctx.reply(
        `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n` +
        `üÜï –ù–æ–≤—ã—Ö –∏–≥—Ä: ${result.newGames}\n` +
        `üìä –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: ${result.realGameCount}\n` +
        `‚ùå –û—à–∏–±–æ–∫: ${result.errors}`,
        this.getMainKeyboard()
      );
      console.log('‚úÖ Results sent successfully');
    } catch (error) {
      console.error('‚ùå Parse games error:', error);
      try {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–≥—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
          this.getMainKeyboard()
        );
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleFindAnomalies(ctx: any) {
    try {
      await ctx.answerCbQuery('üö® –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π...');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    await ctx.reply(
      'üö® –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n\n' +
      '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.',
      this.getMainKeyboard()
    );
  }

  private async handleSettings(ctx: any) {
    try {
      await ctx.answerCbQuery('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    await ctx.reply(
      '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n' +
      'üîß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n\n' +
      '–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n' +
      '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
      '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π\n' +
      '‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_main')]
      ])
    );
  }

  private async handleExportDb(ctx: any) {
    try {
      try {
        await ctx.answerCbQuery('üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...', { show_alert: false });
      } catch (cbError) {
        console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
      }
      await ctx.reply('üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');

      console.log('üîÑ Syncing database before export...');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      db.pragma('synchronous = FULL');
      db.pragma('journal_mode = DELETE');
      db.pragma('wal_checkpoint(FULL)');
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      const dbPath = config.DB_PATH;
      const tempPath = path.join(__dirname, '..', 'temp_export.db');
      
      console.log('üìÅ Creating clean database export...');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é VACUUM INTO
      // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
      try {
        db.prepare(`VACUUM INTO '${tempPath}'`).run();
        console.log('‚úÖ VACUUM INTO completed successfully');
      } catch (vacuumError) {
        console.log('‚ö†Ô∏è VACUUM INTO failed, falling back to file copy');
        // –ï—Å–ª–∏ VACUUM INTO –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        fs.copyFileSync(dbPath, tempPath);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä
      const stats = fs.statSync(tempPath);
      console.log(`üìä Exported database size: ${stats.size} bytes`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ
      let gameCount = 0;
      try {
        const tempDb = require('better-sqlite3')(tempPath);
        const countResult = tempDb.prepare('SELECT COUNT(*) as count FROM games').get() as { count: number };
        gameCount = countResult.count;
        tempDb.close();
        console.log(`üéÆ Games in exported database: ${gameCount}`);
      } catch (countError) {
        console.log('‚ö†Ô∏è Could not count games in exported database:', countError);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      await ctx.replyWithDocument(
        { source: tempPath, filename: 'roblox_monitor.db' },
        {
          caption: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n' +
                   `üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(stats.size / 1024)} KB\n` +
                   `üéÆ –ò–≥—Ä –≤ –±–∞–∑–µ: ${gameCount}\n` +
                   '–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∏–≥—Ä–∞—Ö –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.'
        }
      );

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(tempPath);
      console.log('üóëÔ∏è Temporary file deleted');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await ctx.reply(
        '‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!',
        this.getMainKeyboard()
      );
    } catch (error) {
      console.error('‚ùå Export DB error:', error);
      try {
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.',
          this.getMainKeyboard()
        );
      } catch (replyError) {
        console.error('‚ùå Failed to send error message:', replyError);
      }
    }
  }

  private async handleBackToMain(ctx: any) {
    try {
      await ctx.answerCbQuery('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    } catch (cbError) {
      console.log('‚ö†Ô∏è Callback query already answered or expired, continuing...');
    }
    await ctx.reply(
      'ü§ñ Roblox Monitor Bot\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      this.getMainKeyboard()
    );
  }

  public async start() {
    try {
      console.log('üöÄ Launching Telegram bot...');
      await this.bot.launch();
      console.log('ü§ñ Telegram bot started successfully');
    } catch (error) {
      console.error('‚ùå Failed to start Telegram bot:', error);
      throw error;
    }
  }

  public async stop() {
    try {
      await this.bot.stop();
      console.log('ü§ñ Telegram bot stopped');
    } catch (error) {
      console.error('Error stopping Telegram bot:', error);
    }
  }
}
